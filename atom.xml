<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yindongliang.com</id>
    <title>I&apos;m Yindongliang</title>
    <updated>2019-11-30T13:43:15.440Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yindongliang.com"/>
    <link rel="self" href="https://yindongliang.com/atom.xml"/>
    <subtitle>殷东亮的博客</subtitle>
    <logo>https://yindongliang.com/images/avatar.png</logo>
    <icon>https://yindongliang.com/favicon.ico</icon>
    <rights>All rights reserved 2019, I&apos;m Yindongliang</rights>
    <entry>
        <title type="html"><![CDATA[浅谈Django-REST-framework的设计与源码]]></title>
        <id>https://yindongliang.com/post/EEL1dou99</id>
        <link href="https://yindongliang.com/post/EEL1dou99">
        </link>
        <updated>2017-04-20T06:44:17.000Z</updated>
        <summary type="html"><![CDATA[<p>最近又重新接触DRF，翻看文档发现，当时很难理解的东西，如今看一遍就懂了，顺带看了源码，也比较容易理解，至少比Django的源码简单不少。下面开始从DRF的设计和源码两个方面，结合自己的看法，谈谈DRF。</p>
]]></summary>
        <content type="html"><![CDATA[<p>最近又重新接触DRF，翻看文档发现，当时很难理解的东西，如今看一遍就懂了，顺带看了源码，也比较容易理解，至少比Django的源码简单不少。下面开始从DRF的设计和源码两个方面，结合自己的看法，谈谈DRF。</p>
<!-- more -->
<h2 id="apiview">APIView</h2>
<p>APIView是DRF概念体系中最基本类视图，它基于Django的View，同时又实现了一层对自己创造的概念的封装，比如<code>permission_classes</code>，<code>render_classes</code>，<code>authentication_classes</code>等，相当于请求过来后又进入一层，过滤（验证、初始化）完要走的这些classes，才能执行到我们自己实现的view。</p>
<h2 id="mixin">Mixin</h2>
<p>在介绍Generic view前先说一下mixin。说白了，官方给的案例里面的mixin，就是对model的object增删改查的原子操作。比如<code>RetrieveModelMixin</code>，通过get_object先获取到对象，然后通过serializer拿到序列化数据。</p>
<pre><code class="language-python">class RetrieveModelMixin(object):
    &quot;&quot;&quot;
    Retrieve a model instance.
    &quot;&quot;&quot;
    def retrieve(self, request, *args, **kwargs):
        instance = self.get_object()
        serializer = self.get_serializer(instance)
        return Response(serializer.data)
</code></pre>
<p>延伸开来，Mixin是一个非常重要的概念，因为它是模块化拆分后最关键的原子逻辑实现，是每一个单独的块。试想下，我们可以通过这些小块拼接成不同的功能，比如用户注册功能，使用者有可能在手机注册，有可能在web注册，在Django后端中可能需要提供两套view层接口，甚至还有渲染template的实现，但是真正的逻辑处理上，可以只调用一个<code>RegistMixin</code>的东西，从而提高代码复用，降低维护成本。</p>
<p>甚至，Mixin可以重写同时继承的GenericAPIView中的实现，比如request参数处理，Response数据处理（视频、文件格式之类），get_queryset，get_serializer等等有通用需求，并且会在多个地方复用的定制，比如根据传入参数指定需要的serializer从而在mixin中重写get_serializer方法的实现逻辑。总之，原本会在View中发生的一切，都可以通过Mixin封装起来，或重写、或新的逻辑实现。</p>
<h2 id="generic-views">Generic views</h2>
<p>典型的Generic view就是这样的，本质上是类视图，它由一些Mixin组成，这里的<code>ListModelMixin</code>实现了list()方法，并同时继承自<code>GenericAPIView</code>，同时自己实现了由get()到list()的转发。复杂的是，<code>GenericAPIView</code>实现，以及他的执行过程，和后期对里面函数的重写、定制。所以抽时间多研究下这里很值得，以后也会节省大量时间。</p>
<pre><code class="language-python">class ListAPIView(mixins.ListModelMixin,
                  GenericAPIView):
    &quot;&quot;&quot;
    Concrete view for listing a queryset.
    &quot;&quot;&quot;
    def get(self, request, *args, **kwargs):
        return self.list(request, *args, **kwargs)
</code></pre>
<p>如果要实现的逻辑不是很复杂的话，直接在view中继承一个<code>[List[Create[Update]]]APIView</code>，然后指定下<code>serializer_class</code>，<code>permission_class</code>，<code>queryset</code>等就可以了。对DRF熟悉的话相信这种方式实现功能会很快。</p>
<h2 id="viewsets">Viewsets</h2>
<p>先看代码，ViewSet继承了<code>ViewSetMixin</code>和<code>APIView</code>，<code>ViewSetMix</code>是<code>APIView</code>中<code>as_view</code>的重写，实现请求到action的转发，虽然Django自带的View也实现了as_view，但只是传递初始化参数，确实没有这个请求转发到action的实现，APIView里面也没有。这里也可以学习到：Python的多重继承中，子类形参的先后顺序，影响到执行的是哪个类中的<code>as_view</code>方法，相当于<code>ViewSetMixin</code>又继承了<code>APIView</code>。</p>
<pre><code class="language-python">class ViewSet(ViewSetMixin, views.APIView):
    &quot;&quot;&quot;
    The base ViewSet class does not provide any actions by default.
    &quot;&quot;&quot;
    pass
</code></pre>
<p>viewsets和APIView不一样的地方在于，它要表达的更多的是一个方法视图的集合，他的内部是已经实现了的<code>list()</code>，<code>retrieve()</code>，<code>delete()</code>，<code>update()</code>的实现，如果实现用DRF的DefaultRouter。router和as_view都可以实现GET请求--&gt;list()的转发，值得一提的还有<code>detail_route</code>和<code>list_route</code>(最新版本推荐使用<code>action</code>)，他们需要在urls中配置router的前提下使用，在Router类的<code>get_url</code>里面的<code>get_routers</code>执行，然后获得所有的路由列表，再进行action转发。</p>
<pre><code class="language-python"># account/views.py
class AccountViewSet(viewsets.ModelViewSet):
    &quot;&quot;&quot;
    对Account的操作的集合，本质上是基于方法视图的封装
    &quot;&quot;&quot;
    queryset = User.objects.all()
    serializer_class = UserSerializer

    @detail_route(methods=['post'], url_path='change-password')
    def set_password(self, request, *args, **kwargs):
        &quot;&quot;&quot;
        修改用户的密码
        &quot;&quot;&quot;
        return Response(status=status.HTTP_200_OK)

    @detail_route(methods=['post'], url_path='change-username')
    def change_username(self, request, *args, **kwargs):
        &quot;&quot;&quot;
        修改用户的用户名
        &quot;&quot;&quot;
        return Response(status=status.HTTP_200_OK, data={'msg': 'changed'})

# account/urls.py
router = routers.SimpleRouter()
router.register(r'', views.AccountViewSet, base_name='user')
urlpatterns = router.urls

</code></pre>
<figure data-type="image" tabindex="1"><img src="https://yindongliang.com/post-images/1574349880486.png" alt=""></figure>
<p>以上代码，直接实现了对account的增（create）删（delete）改（update）和account列表（list），同时我又添加了<code>set_password</code>和<code>change_username</code>方法。这种形式没接触过的话很难理解，但是却很实用，尤其一个model有频繁的不同功能需求的时候，如果写<code>SetPasswordView</code>和<code>ChangeUsernameView</code>这样类视图的实现，未免会很麻烦，这个时候viewsets就是很好的选择。</p>
<h2 id="serializers">Serializers</h2>
<pre><code class="language-python">class TopicListSerializer(serializers.ModelSerializer):
    class Meta:
        model = models.TopicModel
        fields = '__all__'
        read_only_fields = ('id', 'author_id')
</code></pre>
<p>Serializer相当于View和Model的中间层，避免view频繁直接操作model object的同时，规范数据字段格式、内容、validator、提供序列化数据等等，同时可以定义方法实现对model的特定操作。serializer不适合处理业务逻辑，它要做的就是对数据传入传出的处理，保证数据正确。通常为了验证和序列化各项数据，serializer的代码加上validator也集中了较大的工作量。</p>
<h2 id="其它">其它</h2>
<p>DRF最主要的就是上面提到的一些概念，也许在刚接触Django Web的话没有接触过，但是这应该是DRF中最常用的。其他的比如router、Throttling、validator也比较实用，甚至也是必须掌握的，但是DRF的文档写的确定很详细，使用方法不再介绍。</p>
<h2 id="总结">总结</h2>
<p>我的理解，DRF是基于“Don't repeat yourself”原则，提出一个Web开发的规范，它代码里提供了规范的接口，和最基础的使用例子，而在实际的复杂逻辑开发中，需要的是对各种概念的“custome”定制，几乎文档每一页都提供了定制的介绍。实际的应用里面不会是简单的增删改查，而是需要走一定的逻辑处理后的增删改查，同时还有对基础操作频繁的复用。DRF通过把web业务系统中会出现的每一步流程拆分，进行模块化，概念化，让开发者知道需要开发的业务属于哪一种概念，放到哪一个模块下面，从而在DRF的大框架下特定的位置编写，这样减少了一份功能多份代码实现的麻烦，也因为规范化coding提高了开发者的效率。</p>
<p>当然DRF也有缺点，它对新手不够友好，一些封装太极致，以至于不容易明白程序的执行流程，比如我初次看<code>viewsets</code>、<code>GenericAPIView</code>的时候。</p>
<p>最后我基于DRF的文档，学习过程中写了一个论坛demo：<a href="https://github.com/tcitry/DRForum">DRForum</a>的论坛例子，可以直接runserver调试。通过<code>127.0.0.1:8000/docs</code>可以查看汇总的接口，这里使用了<a href="http://DRFdocs.com/">DRF Docs</a>。</p>
]]></content>
    </entry>
</feed>